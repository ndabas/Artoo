//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.573.
// 
using System;
using System.Data;
using System.Xml;
using System.Runtime.Serialization;


[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Diagnostics.DebuggerStepThrough()]
[System.ComponentModel.ToolboxItem(true)]
public class ArtooBase : DataSet {
    
    private UserDataTable tableUser;
    
    private StatusDataTable tableStatus;
    
    private BuddyDataTable tableBuddy;
    
    private DataRelation relationUser_Status;
    
    private DataRelation relationUser_Buddy;
    
    public ArtooBase() {
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    protected ArtooBase(SerializationInfo info, StreamingContext context) {
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((strSchema != null)) {
            DataSet ds = new DataSet();
            ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["User"] != null)) {
                this.Tables.Add(new UserDataTable(ds.Tables["User"]));
            }
            if ((ds.Tables["Status"] != null)) {
                this.Tables.Add(new StatusDataTable(ds.Tables["Status"]));
            }
            if ((ds.Tables["Buddy"] != null)) {
                this.Tables.Add(new BuddyDataTable(ds.Tables["Buddy"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.InitClass();
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public UserDataTable User {
        get {
            return this.tableUser;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public StatusDataTable Status {
        get {
            return this.tableStatus;
        }
    }
    
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public BuddyDataTable Buddy {
        get {
            return this.tableBuddy;
        }
    }
    
    public override DataSet Clone() {
        ArtooBase cln = ((ArtooBase)(base.Clone()));
        cln.InitVars();
        return cln;
    }
    
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    protected override void ReadXmlSerializable(XmlReader reader) {
        this.Reset();
        DataSet ds = new DataSet();
        ds.ReadXml(reader);
        if ((ds.Tables["User"] != null)) {
            this.Tables.Add(new UserDataTable(ds.Tables["User"]));
        }
        if ((ds.Tables["Status"] != null)) {
            this.Tables.Add(new StatusDataTable(ds.Tables["Status"]));
        }
        if ((ds.Tables["Buddy"] != null)) {
            this.Tables.Add(new BuddyDataTable(ds.Tables["Buddy"]));
        }
        this.DataSetName = ds.DataSetName;
        this.Prefix = ds.Prefix;
        this.Namespace = ds.Namespace;
        this.Locale = ds.Locale;
        this.CaseSensitive = ds.CaseSensitive;
        this.EnforceConstraints = ds.EnforceConstraints;
        this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
        this.InitVars();
    }
    
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
    }
    
    internal void InitVars() {
        this.tableUser = ((UserDataTable)(this.Tables["User"]));
        if ((this.tableUser != null)) {
            this.tableUser.InitVars();
        }
        this.tableStatus = ((StatusDataTable)(this.Tables["Status"]));
        if ((this.tableStatus != null)) {
            this.tableStatus.InitVars();
        }
        this.tableBuddy = ((BuddyDataTable)(this.Tables["Buddy"]));
        if ((this.tableBuddy != null)) {
            this.tableBuddy.InitVars();
        }
        this.relationUser_Status = this.Relations["User_Status"];
        this.relationUser_Buddy = this.Relations["User_Buddy"];
    }
    
    private void InitClass() {
        this.DataSetName = "ArtooBase";
        this.Prefix = "";
        this.Namespace = "";
        this.Locale = new System.Globalization.CultureInfo("en-US");
        this.CaseSensitive = false;
        this.EnforceConstraints = true;
        this.tableUser = new UserDataTable();
        this.Tables.Add(this.tableUser);
        this.tableStatus = new StatusDataTable();
        this.Tables.Add(this.tableStatus);
        this.tableBuddy = new BuddyDataTable();
        this.Tables.Add(this.tableBuddy);
        ForeignKeyConstraint fkc;
        fkc = new ForeignKeyConstraint("User_Status", new DataColumn[] {
                    this.tableUser.User_IdColumn}, new DataColumn[] {
                    this.tableStatus.User_IdColumn});
        this.tableStatus.Constraints.Add(fkc);
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = System.Data.Rule.Cascade;
        fkc.UpdateRule = System.Data.Rule.Cascade;
        fkc = new ForeignKeyConstraint("User_Buddy", new DataColumn[] {
                    this.tableUser.User_IdColumn}, new DataColumn[] {
                    this.tableBuddy.User_IdColumn});
        this.tableBuddy.Constraints.Add(fkc);
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = System.Data.Rule.Cascade;
        fkc.UpdateRule = System.Data.Rule.Cascade;
        this.relationUser_Status = new DataRelation("User_Status", new DataColumn[] {
                    this.tableUser.User_IdColumn}, new DataColumn[] {
                    this.tableStatus.User_IdColumn}, false);
        this.relationUser_Status.Nested = true;
        this.Relations.Add(this.relationUser_Status);
        this.relationUser_Buddy = new DataRelation("User_Buddy", new DataColumn[] {
                    this.tableUser.User_IdColumn}, new DataColumn[] {
                    this.tableBuddy.User_IdColumn}, false);
        this.relationUser_Buddy.Nested = true;
        this.Relations.Add(this.relationUser_Buddy);
    }
    
    private bool ShouldSerializeUser() {
        return false;
    }
    
    private bool ShouldSerializeStatus() {
        return false;
    }
    
    private bool ShouldSerializeBuddy() {
        return false;
    }
    
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
    
    public delegate void StatusRowChangeEventHandler(object sender, StatusRowChangeEvent e);
    
    public delegate void BuddyRowChangeEventHandler(object sender, BuddyRowChangeEvent e);
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class UserDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnid;
        
        private DataColumn columntoken;
        
        private DataColumn columnpassword;
        
        private DataColumn columnUser_Id;
        
        internal UserDataTable() : 
                base("User") {
            this.InitClass();
        }
        
        internal UserDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn idColumn {
            get {
                return this.columnid;
            }
        }
        
        internal DataColumn tokenColumn {
            get {
                return this.columntoken;
            }
        }
        
        internal DataColumn passwordColumn {
            get {
                return this.columnpassword;
            }
        }
        
        internal DataColumn User_IdColumn {
            get {
                return this.columnUser_Id;
            }
        }
        
        public UserRow this[int index] {
            get {
                return ((UserRow)(this.Rows[index]));
            }
        }
        
        public event UserRowChangeEventHandler UserRowChanged;
        
        public event UserRowChangeEventHandler UserRowChanging;
        
        public event UserRowChangeEventHandler UserRowDeleted;
        
        public event UserRowChangeEventHandler UserRowDeleting;
        
        public void AddUserRow(UserRow row) {
            this.Rows.Add(row);
        }
        
        public UserRow AddUserRow(string id, int token, string password) {
            UserRow rowUserRow = ((UserRow)(this.NewRow()));
            rowUserRow.ItemArray = new object[] {
                    id,
                    token,
                    password,
                    null};
            this.Rows.Add(rowUserRow);
            return rowUserRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            UserDataTable cln = ((UserDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new UserDataTable();
        }
        
        internal void InitVars() {
            this.columnid = this.Columns["id"];
            this.columntoken = this.Columns["token"];
            this.columnpassword = this.Columns["password"];
            this.columnUser_Id = this.Columns["User_Id"];
        }
        
        private void InitClass() {
            this.columnid = new DataColumn("id", typeof(string), null, System.Data.MappingType.Attribute);
            this.Columns.Add(this.columnid);
            this.columntoken = new DataColumn("token", typeof(int), null, System.Data.MappingType.Attribute);
            this.Columns.Add(this.columntoken);
            this.columnpassword = new DataColumn("password", typeof(string), null, System.Data.MappingType.Attribute);
            this.Columns.Add(this.columnpassword);
            this.columnUser_Id = new DataColumn("User_Id", typeof(int), null, System.Data.MappingType.Hidden);
            this.Columns.Add(this.columnUser_Id);
            this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                            this.columnUser_Id}, true));
            this.columnid.Namespace = "";
            this.columntoken.Namespace = "";
            this.columnpassword.Namespace = "";
            this.columnUser_Id.AutoIncrement = true;
            this.columnUser_Id.AllowDBNull = false;
            this.columnUser_Id.Unique = true;
        }
        
        public UserRow NewUserRow() {
            return ((UserRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new UserRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(UserRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.UserRowChanged != null)) {
                this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.UserRowChanging != null)) {
                this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.UserRowDeleted != null)) {
                this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.UserRowDeleting != null)) {
                this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveUserRow(UserRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class UserRow : DataRow {
        
        private UserDataTable tableUser;
        
        internal UserRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableUser = ((UserDataTable)(this.Table));
        }
        
        public string id {
            get {
                try {
                    return ((string)(this[this.tableUser.idColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUser.idColumn] = value;
            }
        }
        
        public int token {
            get {
                try {
                    return ((int)(this[this.tableUser.tokenColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUser.tokenColumn] = value;
            }
        }
        
        public string password {
            get {
                try {
                    return ((string)(this[this.tableUser.passwordColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableUser.passwordColumn] = value;
            }
        }
        
        public bool IsidNull() {
            return this.IsNull(this.tableUser.idColumn);
        }
        
        public void SetidNull() {
            this[this.tableUser.idColumn] = System.Convert.DBNull;
        }
        
        public bool IstokenNull() {
            return this.IsNull(this.tableUser.tokenColumn);
        }
        
        public void SettokenNull() {
            this[this.tableUser.tokenColumn] = System.Convert.DBNull;
        }
        
        public bool IspasswordNull() {
            return this.IsNull(this.tableUser.passwordColumn);
        }
        
        public void SetpasswordNull() {
            this[this.tableUser.passwordColumn] = System.Convert.DBNull;
        }
        
        public StatusRow[] GetStatusRows() {
            return ((StatusRow[])(this.GetChildRows(this.Table.ChildRelations["User_Status"])));
        }
        
        public BuddyRow[] GetBuddyRows() {
            return ((BuddyRow[])(this.GetChildRows(this.Table.ChildRelations["User_Buddy"])));
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class UserRowChangeEvent : EventArgs {
        
        private UserRow eventRow;
        
        private DataRowAction eventAction;
        
        public UserRowChangeEvent(UserRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public UserRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class StatusDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnid;
        
        private DataColumn columnStatusText;
        
        private DataColumn columnUser_Id;
        
        internal StatusDataTable() : 
                base("Status") {
            this.InitClass();
        }
        
        internal StatusDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn idColumn {
            get {
                return this.columnid;
            }
        }
        
        internal DataColumn StatusTextColumn {
            get {
                return this.columnStatusText;
            }
        }
        
        internal DataColumn User_IdColumn {
            get {
                return this.columnUser_Id;
            }
        }
        
        public StatusRow this[int index] {
            get {
                return ((StatusRow)(this.Rows[index]));
            }
        }
        
        public event StatusRowChangeEventHandler StatusRowChanged;
        
        public event StatusRowChangeEventHandler StatusRowChanging;
        
        public event StatusRowChangeEventHandler StatusRowDeleted;
        
        public event StatusRowChangeEventHandler StatusRowDeleting;
        
        public void AddStatusRow(StatusRow row) {
            this.Rows.Add(row);
        }
        
        public StatusRow AddStatusRow(int id, string StatusText, UserRow parentUserRowByUser_Status) {
            StatusRow rowStatusRow = ((StatusRow)(this.NewRow()));
            rowStatusRow.ItemArray = new object[] {
                    id,
                    StatusText,
                    parentUserRowByUser_Status[3]};
            this.Rows.Add(rowStatusRow);
            return rowStatusRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            StatusDataTable cln = ((StatusDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new StatusDataTable();
        }
        
        internal void InitVars() {
            this.columnid = this.Columns["id"];
            this.columnStatusText = this.Columns["StatusText"];
            this.columnUser_Id = this.Columns["User_Id"];
        }
        
        private void InitClass() {
            this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Attribute);
            this.Columns.Add(this.columnid);
            this.columnStatusText = new DataColumn("StatusText", typeof(string), null, System.Data.MappingType.SimpleContent);
            this.Columns.Add(this.columnStatusText);
            this.columnUser_Id = new DataColumn("User_Id", typeof(int), null, System.Data.MappingType.Hidden);
            this.Columns.Add(this.columnUser_Id);
            this.columnid.Namespace = "";
        }
        
        public StatusRow NewStatusRow() {
            return ((StatusRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new StatusRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(StatusRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.StatusRowChanged != null)) {
                this.StatusRowChanged(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.StatusRowChanging != null)) {
                this.StatusRowChanging(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.StatusRowDeleted != null)) {
                this.StatusRowDeleted(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.StatusRowDeleting != null)) {
                this.StatusRowDeleting(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveStatusRow(StatusRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class StatusRow : DataRow {
        
        private StatusDataTable tableStatus;
        
        internal StatusRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableStatus = ((StatusDataTable)(this.Table));
        }
        
        public int id {
            get {
                try {
                    return ((int)(this[this.tableStatus.idColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableStatus.idColumn] = value;
            }
        }
        
        public string StatusText {
            get {
                try {
                    return ((string)(this[this.tableStatus.StatusTextColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableStatus.StatusTextColumn] = value;
            }
        }
        
        public UserRow UserRow {
            get {
                return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["User_Status"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["User_Status"]);
            }
        }
        
        public bool IsidNull() {
            return this.IsNull(this.tableStatus.idColumn);
        }
        
        public void SetidNull() {
            this[this.tableStatus.idColumn] = System.Convert.DBNull;
        }
        
        public bool IsStatusTextNull() {
            return this.IsNull(this.tableStatus.StatusTextColumn);
        }
        
        public void SetStatusTextNull() {
            this[this.tableStatus.StatusTextColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class StatusRowChangeEvent : EventArgs {
        
        private StatusRow eventRow;
        
        private DataRowAction eventAction;
        
        public StatusRowChangeEvent(StatusRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public StatusRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class BuddyDataTable : DataTable, System.Collections.IEnumerable {
        
        private DataColumn columnid;
        
        private DataColumn columnUser_Id;
        
        internal BuddyDataTable() : 
                base("Buddy") {
            this.InitClass();
        }
        
        internal BuddyDataTable(DataTable table) : 
                base(table.TableName) {
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
            this.DisplayExpression = table.DisplayExpression;
        }
        
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        internal DataColumn idColumn {
            get {
                return this.columnid;
            }
        }
        
        internal DataColumn User_IdColumn {
            get {
                return this.columnUser_Id;
            }
        }
        
        public BuddyRow this[int index] {
            get {
                return ((BuddyRow)(this.Rows[index]));
            }
        }
        
        public event BuddyRowChangeEventHandler BuddyRowChanged;
        
        public event BuddyRowChangeEventHandler BuddyRowChanging;
        
        public event BuddyRowChangeEventHandler BuddyRowDeleted;
        
        public event BuddyRowChangeEventHandler BuddyRowDeleting;
        
        public void AddBuddyRow(BuddyRow row) {
            this.Rows.Add(row);
        }
        
        public BuddyRow AddBuddyRow(string id, UserRow parentUserRowByUser_Buddy) {
            BuddyRow rowBuddyRow = ((BuddyRow)(this.NewRow()));
            rowBuddyRow.ItemArray = new object[] {
                    id,
                    parentUserRowByUser_Buddy[3]};
            this.Rows.Add(rowBuddyRow);
            return rowBuddyRow;
        }
        
        public System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        public override DataTable Clone() {
            BuddyDataTable cln = ((BuddyDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override DataTable CreateInstance() {
            return new BuddyDataTable();
        }
        
        internal void InitVars() {
            this.columnid = this.Columns["id"];
            this.columnUser_Id = this.Columns["User_Id"];
        }
        
        private void InitClass() {
            this.columnid = new DataColumn("id", typeof(string), null, System.Data.MappingType.Attribute);
            this.Columns.Add(this.columnid);
            this.columnUser_Id = new DataColumn("User_Id", typeof(int), null, System.Data.MappingType.Hidden);
            this.Columns.Add(this.columnUser_Id);
            this.columnid.Namespace = "";
        }
        
        public BuddyRow NewBuddyRow() {
            return ((BuddyRow)(this.NewRow()));
        }
        
        protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
            return new BuddyRow(builder);
        }
        
        protected override System.Type GetRowType() {
            return typeof(BuddyRow);
        }
        
        protected override void OnRowChanged(DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.BuddyRowChanged != null)) {
                this.BuddyRowChanged(this, new BuddyRowChangeEvent(((BuddyRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowChanging(DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.BuddyRowChanging != null)) {
                this.BuddyRowChanging(this, new BuddyRowChangeEvent(((BuddyRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleted(DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.BuddyRowDeleted != null)) {
                this.BuddyRowDeleted(this, new BuddyRowChangeEvent(((BuddyRow)(e.Row)), e.Action));
            }
        }
        
        protected override void OnRowDeleting(DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.BuddyRowDeleting != null)) {
                this.BuddyRowDeleting(this, new BuddyRowChangeEvent(((BuddyRow)(e.Row)), e.Action));
            }
        }
        
        public void RemoveBuddyRow(BuddyRow row) {
            this.Rows.Remove(row);
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class BuddyRow : DataRow {
        
        private BuddyDataTable tableBuddy;
        
        internal BuddyRow(DataRowBuilder rb) : 
                base(rb) {
            this.tableBuddy = ((BuddyDataTable)(this.Table));
        }
        
        public string id {
            get {
                try {
                    return ((string)(this[this.tableBuddy.idColumn]));
                }
                catch (InvalidCastException e) {
                    throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                }
            }
            set {
                this[this.tableBuddy.idColumn] = value;
            }
        }
        
        public UserRow UserRow {
            get {
                return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["User_Buddy"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["User_Buddy"]);
            }
        }
        
        public bool IsidNull() {
            return this.IsNull(this.tableBuddy.idColumn);
        }
        
        public void SetidNull() {
            this[this.tableBuddy.idColumn] = System.Convert.DBNull;
        }
    }
    
    [System.Diagnostics.DebuggerStepThrough()]
    public class BuddyRowChangeEvent : EventArgs {
        
        private BuddyRow eventRow;
        
        private DataRowAction eventAction;
        
        public BuddyRowChangeEvent(BuddyRow row, DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        public BuddyRow Row {
            get {
                return this.eventRow;
            }
        }
        
        public DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
